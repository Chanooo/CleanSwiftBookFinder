//
//  BookListViewController.swift
//  BookFinder
//
//  Created by CNOO on 2021/09/27.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import Combine

protocol BookListDisplayLogic: AnyObject
{
    func displayFetchedBooks(viewModel: BookList.FetchBooks.ViewModel)
    func displayError()
}

class BookListViewController: UITableViewController,
                              BookListDisplayLogic,
                              UISearchBarDelegate,
                              UITextFieldDelegate
{
    var interactor: BookListBusinessLogic?
    var router: (NSObjectProtocol & BookListRoutingLogic & BookListDataPassing)?
    
    // MARK: Variables
    var searchController = UISearchController(searchResultsController: nil)
    private var bag = Set<AnyCancellable>()
    private var queryText = ""
    private var headerText = ""
    private var startIndex = 0
    private var MAX_RESULT = 10
    
    private var state: SearchState = .finish
    enum SearchState {
        case fetching, idle, finish
    }
    
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = BookListInteractor()
        let presenter = BookListPresenter()
        let router = BookListRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
        
        setupUI()
    }
    
    
    private func setupUI() {
        
        // SEARCHBAR
        searchController.hidesNavigationBarDuringPresentation = true
        searchController.searchBar.searchTextField.delegate = self
        searchController.searchBar.sizeToFit()
        searchController.searchBar.returnKeyType = UIReturnKeyType.done
        searchController.searchBar.placeholder = "ex) the name of book..."
        searchController.searchBar.searchTextField.isAccessibilityElement = true
        searchController.searchBar.searchTextField.accessibilityIdentifier = "searchBarTF"
        
        // Navigation
        navigationController?.navigationBar.prefersLargeTitles = true
        navigationItem.largeTitleDisplayMode = .automatic
        navigationItem.hidesSearchBarWhenScrolling = true
        navigationItem.searchController = searchController
        
        // Bind Searchbar Text
        let searchTextPublisher = NotificationCenter.default
            .publisher(for: UISearchTextField.textDidChangeNotification,
                       object: searchController.searchBar.searchTextField)
            .map { $0.object as? UISearchTextField }
            .map { $0?.text }
            .compactMap{ $0 }
            .filter { $0.count > 0 }
        
        searchTextPublisher
            .debounce(for: .milliseconds(500), scheduler: RunLoop.main)
            .sink(receiveValue: fetchBooks)
            .store(in: &bag)
        
        searchTextPublisher
            .sink(receiveValue: { queryText in
                self.startIndex = 0
                self.headerText = "search '\(queryText)'"
                self.displayedBooks.removeAll()
                self.displayedBooks.append(BookList.FetchBooks.ViewModel.DisplayedBook(state: .fetching))
                self.tableView.reloadData()
            }).store(in: &bag)
        
        
    }
    
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        displayedBooks.append(BookList.FetchBooks.ViewModel.DisplayedBook(state: .search))
        tableView.reloadData()
    }
    
    // MARK: - Fetch orders
    var displayedBooks: [BookList.FetchBooks.ViewModel.DisplayedBook] = []
    
    func fetchBooks(queryText: String)
    {
        state = .fetching
        self.queryText = queryText
        let request = BookList.FetchBooks.Request(queryText: queryText,
                                                  startIndex: self.startIndex,
                                                  maxResult: MAX_RESULT)
        interactor?.fetchBooks(request: request)
    }
    
    
    func displayFetchedBooks(viewModel: BookList.FetchBooks.ViewModel)
    {
        
        // data source
        if startIndex == 0 { // init fetching
            headerText = "\(viewModel.totalItemCnt) results of '\(queryText)'"
            displayedBooks = viewModel.displayedBooks
        } else { // load more
            displayedBooks += viewModel.displayedBooks
        }
        
        // state
        if displayedBooks.count < MAX_RESULT { // finish load
            if viewModel.totalItemCnt == 0 {
                displayedBooks.append(BookList.FetchBooks.ViewModel.DisplayedBook(state: .empty))
            } else {
                displayedBooks.append(BookList.FetchBooks.ViewModel.DisplayedBook(state: .end))
            }
            state = .finish
        } else {
            state = .idle
        }
        
        displayedBooks.removeAll(where: {$0.state == .fetching}) // remove fetching cell
        tableView.reloadData()
    }
    
    func displayError() {
        state = .finish
        displayedBooks.removeAll()
        displayedBooks.append(BookList.FetchBooks.ViewModel.DisplayedBook(state: .error))
        tableView.reloadData()
    }
    
    
    // MARK: - TextField Delegate
    func textFieldShouldReturn(_ textField: UITextField) -> Bool {
        searchController.isActive = false
        return true
    }
    
    
    // MARK: - Table view data source
    override func numberOfSections(in tableView: UITableView) -> Int { 1 }
    
    override func tableView(_ tableView: UITableView, titleForHeaderInSection section: Int) -> String? {
        headerText
    }
    
    override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        displayedBooks.count
    }
    
    override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell
    {
        let data = displayedBooks[indexPath.row]
        switch data.state {
        case .data:
            let cell = tableView.dequeueReusableCell(withIdentifier: "BookListTableViewCell", for: indexPath) as! BookListTableViewCell
            cell.bindData(data: data)
            return cell
            
        case .empty:
            return tableView.dequeueReusableCell(withIdentifier: "NoBookCell", for: indexPath)
            
        case .fetching:
            let cell = tableView.dequeueReusableCell(withIdentifier: "FetchingCell", for: indexPath) as! FetchingCell
            cell.indicatorView.startAnimating()
            return cell
            
        case .search:
            return tableView.dequeueReusableCell(withIdentifier: "SearchLabelCell", for: indexPath)
            
        case .error:
            return tableView.dequeueReusableCell(withIdentifier: "ErrorCell", for: indexPath)
            
        case .end:
            return tableView.dequeueReusableCell(withIdentifier: "EndCell", for: indexPath)
            
        }
    }
    
    override func tableView(_ tableView: UITableView, willSelectRowAt indexPath: IndexPath) -> IndexPath? {
        if displayedBooks[indexPath.row].state == .data {
            return indexPath
        }
        return nil
    }
    
    override func scrollViewDidScroll(_ scrollView: UIScrollView) {
        let position = scrollView.contentOffset.y
        if position > (tableView.contentSize.height - 100 - scrollView.frame.size.height), state == .idle {
            self.state = .fetching
            self.displayedBooks.append(BookList.FetchBooks.ViewModel.DisplayedBook(state: .fetching))
            self.startIndex += self.MAX_RESULT
            self.tableView.reloadData()
            self.fetchBooks(queryText: self.queryText)
        }
        
        
    }
    
//    override func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
//        print(displayedBooks[indexPath.row].title)
//        router?.routeToBookDetail(segue: nil)
//    }
    
}
