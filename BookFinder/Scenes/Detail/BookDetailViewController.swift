//
//  BookDetailViewController.swift
//  BookFinder
//
//  Created by CNOO on 2021/09/29.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import WebKit

protocol BookDetailDisplayLogic: class
{
    func displayBookDetail(viewModel: BookDetail.BookInfo.ViewModel)
}

class BookDetailViewController: UIViewController, BookDetailDisplayLogic
{
    var interactor: BookDetailBusinessLogic?
    var router: (NSObjectProtocol & BookDetailRoutingLogic & BookDetailDataPassing)?
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = BookDetailInteractor()
        let presenter = BookDetailPresenter()
        let router = BookDetailRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
        
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        webView.addObserver(self, forKeyPath: "estimatedProgress", options: .new, context: nil);
        loadBookDetail()
        
    }
    
    // MARK: load Detail
    @IBOutlet weak var webView: WKWebView!
    @IBOutlet weak var progressView: UIProgressView!
    
    func loadBookDetail()
    {
        let request = BookDetail.BookInfo.Request()
        interactor?.loadBookDetail(request: request)
    }
    
    func displayBookDetail(viewModel: BookDetail.BookInfo.ViewModel)
    {
        self.navigationItem.title = viewModel.book.volumeInfo?.title
        
        if let url = URL(string: viewModel.book.volumeInfo?.infoLink ?? "") {
            let request = URLRequest(url: url)
            webView.load(request)
        }
    }
    
    // MARK: WebKit Observing
    
    override func observeValue(forKeyPath keyPath: String?, of object: Any?, change: [NSKeyValueChangeKey : Any]?, context: UnsafeMutableRawPointer?) {
        if keyPath == "estimatedProgress" {
//            print("loading... \(self.webView.estimatedProgress)");
            self.progressView.progress = Float(self.webView.estimatedProgress);
        }
    }
}
